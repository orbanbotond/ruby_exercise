class AddParser
 prechigh
   left DIVISION MULTIPLICATION
   left ADDITION SUBSTRACTION
   nonassoc MINUS
 preclow
rule
  target: exp { result = 0 }

  exp: OPENING_PARANTHESIS exp CLOSING_PARANTHESIS { result = val[1]; puts debug_info(val, _values, result); }
     | exp ADDITION exp                            { result = val[0] + val[2]; puts "+"; puts debug_info(val, _values, result); }
     | exp SUBSTRACTION exp                        { result = val[0] - val[2]; puts "-"; puts debug_info(val, _values, result); }
     | exp MULTIPLICATION exp                      { result = val[0] * val[2]; puts "*"; puts debug_info(val, _values, result); }
     | exp DIVISION exp                            { result = val[0] / val[2]; puts "/"; puts debug_info(val, _values, result); }
     | SUBSTRACTION DIGIT = MINUS                  { result = - val[1]; puts debug_info(val, _values, result); }
     | DIGIT
end
---- header
require_relative 'lexer.rex.rb'

---- inner
def next_token
  @lexer.next_token
end

def debug_info(val, _values, result)
  puts "result:#{result}"
  puts "_values:#{_values}"
  puts "val:#{val}"
end

def prepare_parser file_name
  @lexer = AddLexer.new
  @lexer.parse_file file_name
end

# make a more complicated grammar with multiple non terminals
