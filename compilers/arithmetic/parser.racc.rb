#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.0
# from Racc grammar file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'

class AddParser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 23)
def next_token
  @lexer.next_token
end

def debug_info(val, _values, result)
  puts "result:#{result}"
  puts "_values:#{_values}"
  puts "val:#{val}"
end

def prepare_parser file_name
  @lexer = AddLexer.new
  @lexer.parse_file file_name
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    10,     9,     7,     8,     6,     4,    18,     3,     4,     5,
     3,     4,     5,     3,     4,     5,     3,     4,     5,     3,
     4,     5,     3,    12,     5,    10,     9,     7,     8,    10,
     9,    10,     9,    13 ]

racc_action_check = [
    11,    11,    11,    11,     1,     0,    11,     0,     3,     0,
     3,     7,     3,     7,     8,     7,     8,     9,     8,     9,
    10,     9,    10,     4,    10,     2,     2,     2,     2,    14,
    14,    15,    15,     6 ]

racc_action_pointer = [
     0,     4,    23,     3,    14,   nil,    33,     6,     9,    12,
    15,    -2,   nil,   nil,    27,    29,   nil,   nil,   nil ]

racc_action_default = [
    -9,    -9,    -1,    -9,    -9,    -8,    -9,    -9,    -9,    -9,
    -9,    -9,    -7,    19,    -3,    -4,    -5,    -6,    -2 ]

racc_goto_table = [
     2,     1,   nil,    11,   nil,   nil,   nil,    14,    15,    16,
    17 ]

racc_goto_check = [
     2,     1,   nil,     2,   nil,   nil,   nil,     2,     2,     2,
     2 ]

racc_goto_pointer = [
   nil,     1,     0 ]

racc_goto_default = [
   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 11, :_reduce_1,
  3, 12, :_reduce_2,
  3, 12, :_reduce_3,
  3, 12, :_reduce_4,
  3, 12, :_reduce_5,
  3, 12, :_reduce_6,
  2, 12, :_reduce_7,
  1, 12, :_reduce_none ]

racc_reduce_n = 9

racc_shift_n = 19

racc_token_table = {
  false => 0,
  :error => 1,
  :DIVISION => 2,
  :MULTIPLICATION => 3,
  :ADDITION => 4,
  :SUBSTRACTION => 5,
  :MINUS => 6,
  :OPENING_PARANTHESIS => 7,
  :CLOSING_PARANTHESIS => 8,
  :DIGIT => 9 }

racc_nt_base = 10

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "DIVISION",
  "MULTIPLICATION",
  "ADDITION",
  "SUBSTRACTION",
  "MINUS",
  "OPENING_PARANTHESIS",
  "CLOSING_PARANTHESIS",
  "DIGIT",
  "$start",
  "target",
  "exp" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 7)
  def _reduce_1(val, _values, result)
     result = 0
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 9)
  def _reduce_2(val, _values, result)
     result = val[1]; puts debug_info(val, _values, result);
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 10)
  def _reduce_3(val, _values, result)
     result = val[0] + val[2]; puts "+"; puts debug_info(val, _values, result);
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 11)
  def _reduce_4(val, _values, result)
     result = val[0] - val[2]; puts "-"; puts debug_info(val, _values, result);
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 12)
  def _reduce_5(val, _values, result)
     result = val[0] * val[2]; puts "*"; puts debug_info(val, _values, result);
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 13)
  def _reduce_6(val, _values, result)
     result = val[0] / val[2]; puts "/"; puts debug_info(val, _values, result);
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 14)
  def _reduce_7(val, _values, result)
     result = - val[1]; puts debug_info(val, _values, result);
    result
  end
.,.,

# reduce 8 omitted

def _reduce_none(val, _values, result)
  val[0]
end

end   # class AddParser
