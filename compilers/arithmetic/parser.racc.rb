#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.5.0
# from Racc grammar file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex.rb'

class AddParser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 17)
def next_token
  @lexer.next_token
end

def debug_info(val, _values, result)
  puts "result:#{result}"
  puts "_values:#{_values}"
  puts "val:#{val}"
end

def prepare_parser file_name
  @lexer = AddLexer.new
  @lexer.parse_file file_name
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
     5,     6,     3,     4,     7,     3,     3 ]

racc_action_check = [
     2,     2,     0,     1,     4,     5,     6 ]

racc_action_pointer = [
    -2,     3,    -2,   nil,     4,     1,     2,   nil,   nil,   nil ]

racc_action_default = [
    -5,    -5,    -1,    -4,    -5,    -5,    -5,    10,    -2,    -3 ]

racc_goto_table = [
     2,     1,   nil,   nil,   nil,     8,     9 ]

racc_goto_check = [
     2,     1,   nil,   nil,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,     1,     0 ]

racc_goto_default = [
   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 6, :_reduce_1,
  3, 7, :_reduce_2,
  3, 7, :_reduce_3,
  1, 7, :_reduce_none ]

racc_reduce_n = 5

racc_shift_n = 10

racc_token_table = {
  false => 0,
  :error => 1,
  :ADDITION => 2,
  :SUBSTRACTION => 3,
  :DIGIT => 4 }

racc_nt_base = 5

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ADDITION",
  "SUBSTRACTION",
  "DIGIT",
  "$start",
  "target",
  "exp" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 5)
  def _reduce_1(val, _values, result)
     result = 0
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 7)
  def _reduce_2(val, _values, result)
     result =val[0] + val[2]; puts "+"; puts debug_info(val, _values, result);
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 8)
  def _reduce_3(val, _values, result)
     result =val[0] - val[2]; puts "-"; puts debug_info(val, _values, result);
    result
  end
.,.,

# reduce 4 omitted

def _reduce_none(val, _values, result)
  val[0]
end

end   # class AddParser
